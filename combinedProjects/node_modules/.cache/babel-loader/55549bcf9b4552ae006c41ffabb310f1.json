{"ast":null,"code":"import _slicedToArray from \"/Users/tylerkrueger/Documents/COMS319/test/g68/combinedProjects/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect, useCallback } from 'react';\nexport const useGameStatus = rowsCleared => {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        score = _useState2[0],\n        setScore = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        rows = _useState4[0],\n        setRows = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        level = _useState6[0],\n        setLevel = _useState6[1];\n\n  const linePoints = [40, 100, 300, 1200];\n  const calcScore = useCallback(() => {\n    if (rowsCleared > 0) {\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n      setRows(prev => prev + rowsCleared);\n    }\n  }, [level, linePoints, rowsCleared]);\n  useEffect(() => {\n    calcScore();\n  }, [calcScore, rowsCleared, score]);\n  return [score, setScore, rows, setScore, level, setLevel];\n};","map":{"version":3,"sources":["/Users/tylerkrueger/Documents/COMS319/test/g68/combinedProjects/src/hooks/userGameStatus.js"],"names":["useState","useEffect","useCallback","useGameStatus","rowsCleared","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","prev"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AAEA,OAAO,MAAMC,aAAa,GAAGC,WAAW,IAAI;AAAA,oBACdJ,QAAQ,CAAC,CAAD,CADM;AAAA;AAAA,QACjCK,KADiC;AAAA,QAC1BC,QAD0B;;AAAA,qBAEhBN,QAAQ,CAAC,CAAD,CAFQ;AAAA;AAAA,QAEjCO,IAFiC;AAAA,QAE3BC,OAF2B;;AAAA,qBAGdR,QAAQ,CAAC,CAAD,CAHM;AAAA;AAAA,QAGjCS,KAHiC;AAAA,QAG1BC,QAH0B;;AAKxC,QAAMC,UAAU,GAAG,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,IAAf,CAAnB;AAEA,QAAMC,SAAS,GAAGV,WAAW,CAAC,MAAM;AAChC,QAAGE,WAAW,GAAG,CAAjB,EAAoB;AAChBE,MAAAA,QAAQ,CAACO,IAAI,IAAIA,IAAI,GAAGF,UAAU,CAACP,WAAW,GAAE,CAAd,CAAV,IAA8BK,KAAK,GAAE,CAArC,CAAhB,CAAR;AACAD,MAAAA,OAAO,CAACK,IAAI,IAAIA,IAAI,GAAGT,WAAhB,CAAP;AACH;AACJ,GAL4B,EAK1B,CAACK,KAAD,EAAQE,UAAR,EAAoBP,WAApB,CAL0B,CAA7B;AAOAH,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,SAAS;AACZ,GAFQ,EAEN,CAACA,SAAD,EAAYR,WAAZ,EAAyBC,KAAzB,CAFM,CAAT;AAIA,SAAO,CAACA,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAAwBD,QAAxB,EAAkCG,KAAlC,EAAyCC,QAAzC,CAAP;AACH,CAnBM","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\nexport const useGameStatus = rowsCleared => {\n    const [score, setScore] = useState(0);\n    const [rows, setRows] = useState(0);\n    const [level, setLevel] = useState(0);\n\n    const linePoints = [40, 100, 300, 1200];\n\n    const calcScore = useCallback(() => {\n        if(rowsCleared > 0) {\n            setScore(prev => prev + linePoints[rowsCleared -1] * (level +1));\n            setRows(prev => prev + rowsCleared);\n        }\n    }, [level, linePoints, rowsCleared]);\n\n    useEffect(() => {\n        calcScore();\n    }, [calcScore, rowsCleared, score]);\n\n    return [score, setScore, rows, setScore, level, setLevel]\n}"]},"metadata":{},"sourceType":"module"}