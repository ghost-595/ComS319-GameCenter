{"ast":null,"code":"import _defineProperty from \"/home/jon/Documents/g68/combinedProjects/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/jon/Documents/g68/combinedProjects/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useCallback } from 'react';\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\nexport const usePlayer = () => {\n  const _useState = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        player = _useState2[0],\n        setPlayer = _useState2[1];\n\n  const rotate = (matrix, dir) => {\n    const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index]));\n    if (dir > 0) return rotatedTetro.map(row => row.reverse());\n    return rotatedTetro.reverse();\n  };\n\n  const playerRotate = (stage, dir) => {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n\n    while (checkCollision(clonedPlayer, stage, {\n      x: 0,\n      y: 0\n    })) {\n      clonedPlayer.pos.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -dir);\n        clonedPlayer.pos.x = pos;\n        return;\n      }\n    }\n\n    setPlayer(clonedPlayer);\n  };\n\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    setPlayer(prev => _objectSpread({}, prev, {\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};","map":{"version":3,"sources":["/home/jon/Documents/g68/combinedProjects/src/hooks/usePlayer.js"],"names":["useState","useCallback","TETROMINOS","randomTetromino","STAGE_WIDTH","checkCollision","usePlayer","pos","x","y","tetromino","shape","collided","player","setPlayer","rotate","matrix","dir","rotatedTetro","map","_","index","col","row","reverse","playerRotate","stage","clonedPlayer","JSON","parse","stringify","offset","length","updatePlayerPos","prev","resetPlayer"],"mappings":"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","sourcesContent":["import { useState, useCallback } from 'react';\n\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\n\nexport const usePlayer = () => {\n    const [player, setPlayer] = useState({\n        pos: { x: 0, y: 0 },\n        tetromino: TETROMINOS[0].shape,\n        collided: false,\n    });\n\n    const rotate = (matrix, dir) => {\n        const rotatedTetro = matrix.map((_, index) =>\n            matrix.map(col => col[index]),\n        );\n\n        if(dir > 0) return rotatedTetro.map(row => row.reverse());\n        return rotatedTetro.reverse();\n    };\n\n    const playerRotate = (stage, dir) => {\n        const clonedPlayer = JSON.parse(JSON.stringify(player));\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n        const pos = clonedPlayer.pos.x;\n        let offset = 1;\n        while(checkCollision(clonedPlayer, stage, { x: 0, y: 0})) {\n            clonedPlayer.pos.x += offset;\n            offset = -(offset + (offset > 0 ? 1 : -1));\n            if(offset > clonedPlayer.tetromino[0].length) {\n                rotate(clonedPlayer.tetromino, -dir);\n                clonedPlayer.pos.x = pos;\n                return;\n            }       \n        }\n\n        setPlayer(clonedPlayer);\n    }\n\n    const updatePlayerPos = ({ x, y, collided }) => {\n        setPlayer(prev => ({\n            ...prev,\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y)},\n            collided,\n        }))\n    }\n\n    const resetPlayer = useCallback(() => {\n        setPlayer({\n            pos: { x: STAGE_WIDTH / 2 - 2, y: 0},\n            tetromino: randomTetromino().shape,\n            collided: false,\n        })\n    }, [])\n\n    return [player, updatePlayerPos, resetPlayer, playerRotate]; \n    \n}"]},"metadata":{},"sourceType":"module"}